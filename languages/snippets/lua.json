{
	"multiline comment": {
		"prefix": "-[",
		"body": [
			"--[[ ${0:comment...}]]"
		],
		"description": "Create a multiline comment"
	},

	"nested multiline comment": {
		"prefix": "=[",
		"body": [
			"--[=[ ${0:comment...}]=]"
		],
		"description": "Create a nested multiline comment"
	},

	"function": {
		"prefix": "fun",
		"body": [
			"function ${1:FunctionName}(${2:args})",
			"	${0:...body...}",
			"end"
		],
		"description": "Create a global function"
	},

	"local function": {
		"prefix": "lfun",
		"body": [
			"local function ${1:FunctionName}(${2:args})",
			"	${0:...body...}",
			"end"
		],
		"description": "Create a local function"
	},

	"while loop": {
		"prefix": "while",
		"body": [
			"while ${1:condition} do",
			"	${0:...body...}",
			"end"
		],
		"description": "Create a while loop"
	},

	"repeat loop": {
		"prefix": "repeat",
		"body": [
			"repeat",
			"	${0:...body...}",
			"until ${1:condition}"
		],
		"description": "Create a repeat loop"
	},

	"for i,v in ipairs()": {
		"prefix": "fori",
		"body": [
			"for ${1:i},${2:v} in ipairs(${3:table name}) do",
			"	${0:...body...}",
			"end"
		],
		"description": "Create a for loop using ipairs"
	},

	"for i=1,10": {
		"prefix": "for",
		"body": [
			"for ${1:i}=${2:start},${3:end} do",
			"	${0:...body...}",
			"end"
		],
		"description": "Create a for loop"
	},

	"for k,v in pairs()": {
		"prefix": "forp",
		"body": [
			"for ${1:k},${2:v} in pairs(${3:table name}) do",
			"	${0:...body...}",
			"end"
		],
		"description": "Create a for loop using pairs"
	},

	"local variable definition": {
		"prefix": "lvar",
		"body": [
			"local ${1:variable} = ${0:value}"
		],
		"description": "Create a local variable"
	},

	"variable definition": {
		"prefix": "var",
		"body": [
			"${1:variable} = ${0:value}"
		],
		"description": "Create a global variable"
	},

	"if conditional": {
		"prefix": "if",
		"body": [
			"if ${1:value} then",
			"	${0:...body...}",
			"end"
		],
		"description": "Create an if conditional"
	},

	"if else conditional": {
		"prefix": "ife",
		"body": [
			"if ${1:value} then",
			"	${2:...body...}",
			"else",
			"	${0:...body...}",
			"end"
		],
		"description": "Create an if else conditional"
	},

	"if not conditional": {
		"prefix": "ifn",
		"body": [
			"if not ${1:value} then",
			"	${0:...body...}",
			"end"
		],
		"description": "Create an if not conditional"
	},

	"if not else conditional": {
		"prefix": "ifne",
		"body": [
			"if not ${1:value} then",
			"	${2:...body...}",
			"else",
			"	${0:...body...}",
			"end"
		],
		"description": "Create an if not else conditional"
	},

	"table definition": {
		"prefix": "tab",
		"body": [
			"${1:table name} = {${0:values}}"
		],
		"description": "Create a global table"
	},

	"local table definition": {
		"prefix": "ltab",
		"body": [
			"local ${1:table name} = {${0:values}}"
		],
		"description": "Create a local table"
	},

	"table insert": {
		"prefix": "tins",
		"body": [
			"tinsert(${1:table name},${0:data})"
		],
		"description": "Insert a given value into a table"
	},

	"table concat": {
		"prefix": "tconc",
		"body": [
			"table.concat(${1:tableName}${2:, ' '}${3:, start_index}${4:, end_index})"
		],
		"description": "Concatenates string tables"
	},

	"table sort": {
		"prefix": "tabs",
		"body": [
			"sort(${1:tableName}${2:, sortfunction})"
		],
		"description": "Sorts a table. You can use a sort function to choose how to sort"
	},

	"table remove": {
		"prefix": "trem",
		"body": [
			"tremove(${1:tableName}${2:, position})"
		],
		"description": "Remove an element from a table"
	},

	"wipe table": {
		"prefix": "wipe",
		"body": [
			"wipe(${1:tableName})"
		],
		"description": "Wipe a table"
	},	

	"unpack table": {
		"prefix": "unpack",
		"body": [
			"unpack(${1:tableName}${2:, i}${3:, j})"
		],
		"description": "Returns the list of elements in a table"
	},

	"to string": {
		"prefix": "tostring",
		"body": [
			"tostring(${1:value})"
		],
		"description": "Returns a string representation of a value"
	},

	"to number": {
		"prefix": "tonumber",
		"body": [
			"tonumber(${1:string}${2:, base})"
		],
		"description": "Return a number if arg can be converted to number. Optional argument specifies the base to interpret the numeral."
	},

	"string lenght": {
		"prefix": "strlen",
		"body": [
			"strlen(${1:string})"
		],
		"description": "Return a number if arg can be converted to number. Optional argument specifies the base to interpret the numeral."
	},

	"math abs": {
		"prefix": "abs",
		"body": [
			"abs(${0:x})"
		],
		"description": "Returns the absolute value of the number"
	},

	"math acos": {
		"prefix": "acos",
		"body": [
			"acos(${0:x})"
		],
		"description": "Returns the arc cosine of the value in degrees"
	},

	"math asin": {
		"prefix": "asin",
		"body": [
			"asin(${0:x})"
		],
		"description": "Returns the arc sine of the value in degrees"
	},

	"math atan": {
		"prefix": "atan",
		"body": [
			"atan(${0:x})"
		],
		"description": "Returns the arc tangent of the value in degrees"
	},

	"math atan2": {
		"prefix": "atan2",
		"body": [
			"atan2(${0:y}, ${1:x})"
		],
		"description": "Returns the arc tangent of y/x in degrees"
	},

	"math ceil": {
		"prefix": "ceil",
		"body": [
			"ceil(${0:x})"
		],
		"description": "Returns the ceiling of value"
	},

	"math cos": {
		"prefix": "cos",
		"body": [
			"cos(${0:x})"
		],
		"description": "Returns the cosine of the degree value"
	},

	"math deg": {
		"prefix": "deg",
		"body": [
			"deg(${0:x})"
		],
		"description": "Returns the degree equivalent of the radian value"
	},

	"math exp": {
		"prefix": "exp",
		"body": [
			"exp(${0:x})"
		],
		"description": "Returns the exponent of value"
	},

	"math floor": {
		"prefix": "floor",
		"body": [
			"floor(${0:x})"
		],
		"description": "Returns the floor of value"
	},

	"math fmod": {
		"prefix": "fmod",
		"body": [
			"fmod(${0:x}, ${1:y})"
		],
		"description": "Returns the remainder of the division of value by modulus that rounds the quotient towards zero"
	},

	"math frexp": {
		"prefix": "frexp",
		"body": [
			"frexp(${0:x})"
		],
		"description": "Extract mantissa and exponent from a floating point number"
	},

	"math ldexp": {
		"prefix": "ldexp",
		"body": [
			"ldexp(${0:value}, ${1:exponent})"
		],
		"description": "Load exponent of a floating point number"
	},

	"math log": {
		"prefix": "log",
		"body": [
			"log(${0:x})"
		],
		"description": "Returns the natural logarithm (log base e) of value"
	},

	"math log10": {
		"prefix": "log10",
		"body": [
			"log10(${0:x})"
		],
		"description": "Returns the base-10 logarithm of value"
	},

	"math max": {
		"prefix": "max",
		"body": [
			"max(${0:x}, ${1:...})"
		],
		"description": "Returns the numeric maximum of the input values"
	},

	"math min": {
		"prefix": "min",
		"body": [
			"min(${0:x}, ${1:...})"
		],
		"description": "Returns the numeric minimum of the input values"
	},

	"math rad": {
		"prefix": "rad",
		"body": [
			"rad(${0:x})"
		],
		"description": "Returns the radian equivalent of the degree value"
	},

	"math random": {
		"prefix": "random",
		"body": [
			"random(${0:lower,} ${1:upper})"
		],
		"description": "Returns a random number (optionally bounded integer value)"
	},

	"fast random": {
		"prefix": "fastrandom",
		"body": [
			"fastrandom(${0:lower,} ${1:upper})"
		],
		"description": "Returns a random number (can't be used in secure enviorment but are faster than random and math.random)"
	},

	"math sin": {
		"prefix": "sin",
		"body": [
			"sin(${0:x})"
		],
		"description": "Returns the sine of the degree value"
	},

	"math sqrt": {
		"prefix": "sqrt",
		"body": [
			"sqrt(${0:x})"
		],
		"description": "Return the square root of value"
	},

	"math tan": {
		"prefix": "tan",
		"body": [
			"tan(${0:x})"
		],
		"description": "Returns the tangent of the degree value"
	},

	"return": {
		"prefix": "return",
		"body": [
			"return ${0:value}"
		],
		"description": "Return values"
	},

	"print": {
		"prefix": "print",
		"body": [
			"print(${0:content})"
		],
		"description": "Print something"
	},

	"Database (savedvariables)": {
		"prefix": "svar",
		"body": [
			"${1:Database name}DB = $1DB or {};"
		],
		"description": "Create a global database variable to use for savedvariables"
	},

	"Create Frame": {
		"prefix": "frame",
		"body": [
			"local ${1:frame var name} = CreateFrame('Frame' ${2:, 'frame name'}${3:, parent frame})"
		],
		"description": "Create a standard frame"
	},

	"Create Button": {
		"prefix": "button",
		"body": [
			"local ${1:button var name} = CreateFrame('Button' ${2:, 'button name'}${3:, parent frame})"
		],
		"description": "Create a standard button"
	},

	"Frame Texture": {
		"prefix": "texture",
		"body": [
			"local ${1:texture var name} = ${2:parent var name}:CreateTexture(nil, 'BACKGROUND')"
		],
		"description": "Create a texture to apply on a frame/button"
	},

	"Frame Text": {
		"prefix": "text",
		"body": [
			"local ${1:text var name} = ${2:parent var name}:CreateFontString(nil, 'ARTWORK')"
		],
		"description": "Create text to apply on a frame/button"
	},

	"SetScript Function": {
		"prefix": "scriptfun",
		"body": [
			"${1:frame}:SetScript(${2:'event name'}, function(self, event, ...)",
				"${0:...body...}",
			"end)"
		],
		"description": "Create a self running function script"
	},

	"SetScript": {
		"prefix": "script",
		"body": [
			"${1:frame}:SetScript(${2:'event name'}, ${3:function name})"
		],
		"description": "Create a script to run a function"
	},

	"Slash Command": {
		"prefix": "slash",
		"body": [
			"SLASH_${1:NAME ALL CAPS}1 = '/slashcommand'",
			"SlashCmdList['$1'] = function()",
				"${0:...body...}",
			"end"
		],
		"description": "Create a slash command"
	},

	"Declare LDB": {
		"prefix": "ldb",
		"body": [
			"local ${1:ldb} = LibStub:GetLibrary('LibDataBroker-1.1')",
			"local ${2:dataobj} = ldb:NewDataObject(${3:'Addon Name'}, {",
			"	type = ${4:'data source'},",
			"	icon = ${5:'Interface\\Icons\\'},",
			"	label = ${6:'Addon Label'}",
			"	text = ${7:'Addon Text'}",
			"})"
		],
		"description": "Declare your addon as being an LDB type data broker"
	}
}